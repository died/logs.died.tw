@{
    ViewBag.Title = "M01Chart";
}

<h2>M01Chart</h2>
@ViewBag.Result
<input type="button" onclick="addline(36169)" value="click">
<div id="demo" style="width:800px;height:500px"></div>

@section scripts {
    @Scripts.Render("~/bundles/jqueryui", "~/bundles/cytoscape")
    <script type="text/javascript">
        function getWeight(ii) {
            if (ii == 0) return 5;
            return ii * 10;
        }
        
        //function getType(obj) {
        //    if (obj === undefined) { return 'undefined'; }
        //    if (obj === null) { return 'null'; }
        //    return Object.prototype.toString.call(obj).split(' ').pop().split(']').shift().toLowerCase();
        //}

        //Object.prototype.getType = function () {
        //    return Object.prototype.toString.call(this).split(' ').pop().split(']').shift().toLowerCase();
        //};

        $(function () {

            //var nodeCount = 10;
            //var edgeCount = 12;

            var demoNodes = [];
            var demoEdges = [];
            
            $.getJSON('/service/datacenter.ashx?m=uid&t=1021740',
                function (data) {
                    //alert(data.Nodes.NodeList[0].id);
                    var nodelist = data.Nodes.NodeList;
                    var edgelist = data.Edges.EdgeList;
                    //alert(getWeight(edgelist[0].weight));
                    for (var key in nodelist) {
                        demoNodes.push({
                            data: {
                                id: nodelist[key].id,
                                weight: parseInt(getWeight(nodelist[key].wdight))
                            }
                        });
                    }
                    for (var key2 in edgelist) {
                        demoEdges.push({
                            data: {
                                id: edgelist[key2].id,
                                source: edgelist[key2].source,
                                target: edgelist[key2].target,
                                weight: parseInt(getWeight(edgelist[key2].wdight))
                            }
                        });
                    }
                    //var p;
                    //for ( p in demoEdges[1].data) {
                    //    if (demoEdges[1].data.hasOwnProperty(p)) {
                    //        alert(demoEdges[1].data.weight);
                    //    }
                    //}
                    alert(demoEdges[1].data.weight);
                    alert(isNaN(demoEdges[1].data.weight));
                    //alert(demoEdges.length);
                    //alert(demoNodes.length);
                    $('#demo').cytoscape({
                        elements: { // TODO specify some elements like http://cytoscapeweb.cytoscape.org/demos/simple
                            nodes: demoNodes,
                            edges: demoEdges
                        },

                        // TODO specify a nice style like http://cytoscapeweb.cytoscape.org/demos/simple
                        style: cytoscape.stylesheet()
                            .selector("node")
                            .css({
                                "content": "data(id)",
                                "shape": "data(shape)",
                                "border-width": 3,
                                "background-color": "#DDD",
                                "border-color": "#555",
                            })
                            .selector("edge")
                            .css({
                                "content": "data(weight)",
                                "width": "mapData(weight, 0, 100, 1, 50)",
                                "target-arrow-shape": "triangle",
                                //"source-arrow-shape": "circle",
                                "line-color": "#444",
                            })
                            .selector(":selected")
                            .css({
                                "background-color": "#000",
                                "line-color": "#000",
                                "source-arrow-color": "#000",
                                "target-arrow-color": "#000"
                            })
                            .selector(".ui-cytoscape-edgehandles-source")
                            .css({
                                "border-color": "#5CC2ED",
                                "border-width": 3
                            })
                            .selector(".ui-cytoscape-edgehandles-target, node.ui-cytoscape-edgehandles-preview")
                            .css({
                                "background-color": "#5CC2ED"
                            })
                            .selector("edge.ui-cytoscape-edgehandles-preview")
                            .css({
                                "line-color": "#5CC2ED"
                            })
                            .selector("node.ui-cytoscape-edgehandles-preview, node.intermediate")
                            .css({
                                "shape": "rectangle",
                                "width": 15,
                                "height": 15
                            })
                        ,

                        //ready: function () {
                        //    window.cy = this; // for debugging

                        //    var nodeCount = cy.nodes().length;
                        //    for (var i = 0; i < nodeCount; i++) {

                        //        var center = [cy.container().clientWidth / 2, cy.container().clientHeight / 2];

                        //        var angle = i / nodeCount * Math.PI * 2;
                        //        //      	console.log(angle);
                        //        var radius =
                        //            Math.min(cy.container().clientWidth, cy.container().clientHeight) / 2 * 0.6;
                        //        //      	console.log(radius);

                        //        var nodePos = [Math.cos(angle) * radius + center[0], Math.sin(angle) * radius + center[1]]
                        //        //  		console.log(nodePos);
                        //        cy.nodes()[i].position({ x: nodePos[0], y: nodePos[1] });
                        //    }
                        //}
                    });
                });

            //for (var i = 0; i < nodeCount; i++) {
            //    demoNodes.push({
            //        data: {
            //            id: "n" + i,
            //            weight: Math.round(Math.random() * 100)
            //        }
            //    });
            //}

            //for (var i = 0; i < nodeCount; i++) {
            //    demoEdges.push({
            //        data: {
            //            id: "e" + (i * 2),
            //            source: "n" + ((i + 1) >= nodeCount ? i + 1 - nodeCount : i + 1),
            //            target: "n" + i,
            //            weight: i*10
            //        }
            //    });

            //    if (i % 2 == 0) {
            //        demoEdges.push({
            //            data: {
            //                id: "e" + (i * 2 + 1),
            //                target: "n" + i,
            //                source: "n" + ((i + 3) >= nodeCount ? i + 3 - nodeCount : i + 3),
            //                weight: i * 10
            //            }
            //        });
            //    }
            //}





        });
        
        function addline(uid) {
            
            $.getJSON('/service/datacenter.ashx?m=uid&t=' + uid ,
                function (data) {
                    alert(data.Nodes.NodeList[0].id);
                    //for (var j = 0; j < data.length; j++) {
                    //    var seriesData = [];
                    //    var chartData = data[j].Data;
                    //    var chartName = data[j].Name;
                    //    if (chartName != null) {
                    //        for (var i = 0; i < chartData.length; i++) {
                    //            var x = new Date(chartData[i].Date).getTime();
                    //            var y = chartData[i].Value;
                    //            seriesData.push([x, y]);
                    //        }
                    //        gamelist.push(game);
                    //        chart.addSeries({
                    //            name: chartName,
                    //            data: seriesData
                    //        });
                    //    } else {
                    //        alert(game + ' has no data!!');
                    //    }
                    //}
                });
        }

    </script>
}